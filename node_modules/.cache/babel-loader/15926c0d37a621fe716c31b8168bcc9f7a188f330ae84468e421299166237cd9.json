{"ast":null,"code":"\"use strict\";\n\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    if (keyArg === \"Control\") {\n      return Boolean(this.ctrlKey);\n    }\n    if ([\"Alt\", \"Meta\", \"Shift\"].includes(keyArg)) {\n      return Boolean(this[`${keyArg.toLowerCase()}Key`]);\n    }\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n}\nexports.implementation = EventModifierMixinImpl;","map":{"version":3,"names":["EventModifierMixinImpl","getModifierState","keyArg","Boolean","ctrlKey","includes","toLowerCase","exports","implementation"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/jsdom/living/events/EventModifierMixin-impl.js"],"sourcesContent":["\"use strict\";\n\n// This mixin doesn't have an IDL equivalent, but since MouseEvent and KeyboardEvent implement getModifierState() the\n// same way, its implementation is shared here.\n\nclass EventModifierMixinImpl {\n  // Event's constructor assumes all options correspond to IDL attributes with the same names, and sets them on `this`.\n  // That is not the case for these modifier boolean options, but since the options are set on `this` anyway we'll\n  // access them that way. The spec doesn't say much about the case where keyArg is not one of the valid ones\n  // (https://w3c.github.io/uievents-key/#keys-modifier), but at least Chrome returns false for invalid modifiers. Since\n  // these invalid modifiers will be undefined on `this` (thus `false` after casting it to boolean), we don't need to do\n  // extra checking for validity.\n  getModifierState(keyArg) {\n    if (keyArg === \"Control\") {\n      return Boolean(this.ctrlKey);\n    }\n    if ([\"Alt\", \"Meta\", \"Shift\"].includes(keyArg)) {\n      return Boolean(this[`${keyArg.toLowerCase()}Key`]);\n    }\n    return Boolean(this[`modifier${keyArg}`]);\n  }\n}\n\nexports.implementation = EventModifierMixinImpl;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AAEA,MAAMA,sBAAsB,CAAC;EAC3B;EACA;EACA;EACA;EACA;EACA;EACAC,gBAAgBA,CAACC,MAAM,EAAE;IACvB,IAAIA,MAAM,KAAK,SAAS,EAAE;MACxB,OAAOC,OAAO,CAAC,IAAI,CAACC,OAAO,CAAC;IAC9B;IACA,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,CAAC,CAACC,QAAQ,CAACH,MAAM,CAAC,EAAE;MAC7C,OAAOC,OAAO,CAAC,IAAI,CAAE,GAAED,MAAM,CAACI,WAAW,CAAC,CAAE,KAAI,CAAC,CAAC;IACpD;IACA,OAAOH,OAAO,CAAC,IAAI,CAAE,WAAUD,MAAO,EAAC,CAAC,CAAC;EAC3C;AACF;AAEAK,OAAO,CAACC,cAAc,GAAGR,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}