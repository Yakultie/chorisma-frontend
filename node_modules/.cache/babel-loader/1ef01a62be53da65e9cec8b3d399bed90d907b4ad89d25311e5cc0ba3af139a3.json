{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst {\n  URL\n} = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst {\n  createWindow\n} = require(\"./jsdom/browser/Window.js\");\nconst {\n  parseIntoDocument\n} = require(\"./jsdom/browser/parser\");\nconst {\n  fragmentSerialization\n} = require(\"./jsdom/living/domparsing/serialization.js\");\nconst ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\nconst NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\");\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, {\n      looseMode: true,\n      ...options\n    });\n  }\n}\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\nclass JSDOM {\n  constructor() {\n    let input = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n    const {\n      html,\n      encoding\n    } = normalizeHTML(input, mimeType);\n    options = transformOptions(options, encoding, mimeType);\n    this[window] = createWindow(options.windowOptions);\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    options.beforeParse(this[window]._globalProxy);\n    parseIntoDocument(html, documentImpl);\n    documentImpl.close();\n  }\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `createWindow(...)`, since otherwise\n    // things like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n  serialize() {\n    return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), {\n      requireWellFormed: false\n    });\n  }\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n    return idlUtils.implForWrapper(node).sourceCodeLocation;\n  }\n  getInternalVMContext() {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n    }\n    return this[window];\n  }\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n      document._URL = url;\n      document._origin = whatwgURL.serializeURLOrigin(document._URL);\n      this[window]._sessionHistory.currentEntry.url = url;\n    }\n  }\n  static fragment() {\n    let string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = new JSDOM().window.document;\n    }\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n  static fromURL(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Promise.resolve().then(() => {\n      // Remove the hash while sending this through the research loader fetch().\n      // It gets added back a few lines down when constructing the JSDOM object.\n      const parsedURL = new URL(url);\n      const originalHash = parsedURL.hash;\n      parsedURL.hash = \"\";\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n      const resourceLoader = resourcesToResourceLoader(options.resources);\n      const resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ? new ResourceLoader() : resourceLoader;\n      const req = resourceLoaderForInitialRequest.fetch(url, {\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        cookieJar: options.cookieJar,\n        referrer: options.referrer\n      });\n      return req.then(body => {\n        const res = req.response;\n        options = Object.assign(options, {\n          url: req.href + originalHash,\n          contentType: res.headers[\"content-type\"],\n          referrer: req.getHeader(\"referer\") ?? undefined\n        });\n        return new JSDOM(body, options);\n      });\n    });\n  }\n  static async fromFile(filename) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    options = normalizeFromFileOptions(filename, options);\n    const buffer = await fs.readFile(filename);\n    return new JSDOM(buffer, options);\n  }\n}\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = {\n    ...options\n  };\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = {\n    ...options\n  };\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xht\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n  return normalized;\n}\nfunction transformOptions(options, encoding, mimeType) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false,\n        scriptingEnabled: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n    // Defaults\n    beforeParse() {}\n  };\n\n  // options.contentType was parsed into mimeType by the caller.\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n  }\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n    transformed.windowOptions.parseOptions = {\n      sourceCodeLocationInfo: true\n    };\n  }\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts === \"dangerously\") {\n      transformed.windowOptions.parseOptions.scriptingEnabled = true;\n    } else if (transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n  return transformed;\n}\nfunction normalizeHTML(html, mimeType) {\n  let encoding = \"UTF-8\";\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel: mimeType.parameters.get(\"charset\")\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n  return {\n    html,\n    encoding\n  };\n}\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined:\n      {\n        return new NoOpResourceLoader();\n      }\n    case \"usable\":\n      {\n        return new ResourceLoader();\n      }\n    default:\n      {\n        if (!(resources instanceof ResourceLoader)) {\n          throw new TypeError(\"resources must be an instance of ResourceLoader\");\n        }\n        return resources;\n      }\n  }\n}\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\nexports.toughCookie = toughCookie;","map":{"version":3,"names":["path","require","fs","promises","vm","toughCookie","sniffHTMLEncoding","whatwgURL","whatwgEncoding","URL","MIMEType","idlUtils","VirtualConsole","createWindow","parseIntoDocument","fragmentSerialization","ResourceLoader","NoOpResourceLoader","CookieJar","constructor","store","options","looseMode","window","Symbol","sharedFragmentDocument","JSDOM","input","arguments","length","undefined","mimeType","contentType","html","encoding","normalizeHTML","transformOptions","windowOptions","documentImpl","implForWrapper","_document","beforeParse","_globalProxy","close","virtualConsole","_virtualConsole","cookieJar","_cookieJar","serialize","requireWellFormed","nodeLocation","node","_parseOptions","sourceCodeLocationInfo","Error","sourceCodeLocation","getInternalVMContext","isContext","TypeError","reconfigure","settings","_top","windowTop","document","url","parseURL","_URL","_origin","serializeURLOrigin","_sessionHistory","currentEntry","fragment","string","template","createElement","innerHTML","content","fromURL","Promise","resolve","then","parsedURL","originalHash","hash","href","normalizeFromURLOptions","resourceLoader","resourcesToResourceLoader","resources","resourceLoaderForInitialRequest","req","fetch","accept","referrer","body","res","response","Object","assign","headers","getHeader","fromFile","filename","normalizeFromFileOptions","buffer","readFile","normalized","extname","transformed","parsingMode","parseOptions","scriptingEnabled","runScripts","pretendToBeVisual","storageQuota","isHTML","isXML","RangeError","essence","includeNodeLocations","sendTo","console","String","Boolean","Number","ArrayBuffer","isView","Buffer","from","byteOffset","byteLength","isBuffer","defaultEncoding","transportLayerEncodingLabel","parameters","get","decode","exports"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/api.js"],"sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"fs\").promises;\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { URL } = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst { createWindow } = require(\"./jsdom/browser/Window.js\");\nconst { parseIntoDocument } = require(\"./jsdom/browser/parser\");\nconst { fragmentSerialization } = require(\"./jsdom/living/domparsing/serialization.js\");\nconst ResourceLoader = require(\"./jsdom/browser/resources/resource-loader.js\");\nconst NoOpResourceLoader = require(\"./jsdom/browser/resources/no-op-resource-loader.js\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, { looseMode: true, ...options });\n  }\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input = \"\", options = {}) {\n    const mimeType = new MIMEType(options.contentType === undefined ? \"text/html\" : options.contentType);\n    const { html, encoding } = normalizeHTML(input, mimeType);\n\n    options = transformOptions(options, encoding, mimeType);\n\n    this[window] = createWindow(options.windowOptions);\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n\n    options.beforeParse(this[window]._globalProxy);\n\n    parseIntoDocument(html, documentImpl);\n\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `createWindow(...)`, since otherwise\n    // things like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return fragmentSerialization(idlUtils.implForWrapper(this[window]._document), { requireWellFormed: false });\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.sourceCodeLocationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).sourceCodeLocation;\n  }\n\n  getInternalVMContext() {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" +\n        \"Use the runScripts option during creation.\");\n    }\n\n    return this[window];\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document._origin = whatwgURL.serializeURLOrigin(document._URL);\n      this[window]._sessionHistory.currentEntry.url = url;\n    }\n  }\n\n  static fragment(string = \"\") {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = (new JSDOM()).window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      // Remove the hash while sending this through the research loader fetch().\n      // It gets added back a few lines down when constructing the JSDOM object.\n      const parsedURL = new URL(url);\n      const originalHash = parsedURL.hash;\n      parsedURL.hash = \"\";\n      url = parsedURL.href;\n\n      options = normalizeFromURLOptions(options);\n\n      const resourceLoader = resourcesToResourceLoader(options.resources);\n      const resourceLoaderForInitialRequest = resourceLoader.constructor === NoOpResourceLoader ?\n        new ResourceLoader() :\n        resourceLoader;\n\n      const req = resourceLoaderForInitialRequest.fetch(url, {\n        accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n        cookieJar: options.cookieJar,\n        referrer: options.referrer\n      });\n\n      return req.then(body => {\n        const res = req.response;\n\n        options = Object.assign(options, {\n          url: req.href + originalHash,\n          contentType: res.headers[\"content-type\"],\n          referrer: req.getHeader(\"referer\") ?? undefined\n        });\n\n        return new JSDOM(body, options);\n      });\n    });\n  }\n\n  static async fromFile(filename, options = {}) {\n    options = normalizeFromFileOptions(filename, options);\n    const buffer = await fs.readFile(filename);\n\n    return new JSDOM(buffer, options);\n  }\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = { ...options };\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = { ...options };\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xht\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding, mimeType) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      parseOptions: {\n        sourceCodeLocationInfo: false,\n        scriptingEnabled: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n\n      // Defaults filled in later\n      resourceLoader: undefined,\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    beforeParse() { }\n  };\n\n  // options.contentType was parsed into mimeType by the caller.\n  if (!mimeType.isHTML() && !mimeType.isXML()) {\n    throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n  }\n\n  transformed.windowOptions.contentType = mimeType.essence;\n  transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = (new URL(options.url)).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = { sourceCodeLocationInfo: true };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ?\n                                       new CookieJar() :\n                                       options.cookieJar;\n\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ?\n                                            (new VirtualConsole()).sendTo(console) :\n                                            options.virtualConsole;\n\n  if (!(transformed.windowOptions.virtualConsole instanceof VirtualConsole)) {\n    throw new TypeError(\"virtualConsole must be an instance of VirtualConsole\");\n  }\n\n  transformed.windowOptions.resourceLoader = resourcesToResourceLoader(options.resources);\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts === \"dangerously\") {\n      transformed.windowOptions.parseOptions.scriptingEnabled = true;\n    } else if (transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  return transformed;\n}\n\nfunction normalizeHTML(html, mimeType) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: mimeType.isXML() ? \"UTF-8\" : \"windows-1252\",\n      transportLayerEncodingLabel: mimeType.parameters.get(\"charset\")\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return { html, encoding };\n}\n\nfunction resourcesToResourceLoader(resources) {\n  switch (resources) {\n    case undefined: {\n      return new NoOpResourceLoader();\n    }\n    case \"usable\": {\n      return new ResourceLoader();\n    }\n    default: {\n      if (!(resources instanceof ResourceLoader)) {\n        throw new TypeError(\"resources must be an instance of ResourceLoader\");\n      }\n      return resources;\n    }\n  }\n}\n\nexports.JSDOM = JSDOM;\n\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.ResourceLoader = ResourceLoader;\n\nexports.toughCookie = toughCookie;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}