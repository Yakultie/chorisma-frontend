{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst Function = require(\"./Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"Headers\";\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = function (globalObject, value) {\n  let {\n    context = \"The provided value\"\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'Headers'.`);\n};\nexports.createDefaultIterator = (globalObject, target, kind) => {\n  const ctorRegistry = globalObject[ctorRegistrySymbol];\n  const iteratorPrototype = ctorRegistry[\"Headers Iterator\"];\n  const iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: {\n      target,\n      kind,\n      index: 0\n    },\n    configurable: true\n  });\n  return iterator;\n};\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"Headers\"].prototype;\n  }\n  return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject) => {};\nexports.setup = function (wrapper, globalObject) {\n  let constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\nconst exposed = new Set([\"Window\", \"Worker\"]);\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class Headers {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          if (utils.isObject(curArg)) {\n            if (curArg[Symbol.iterator] !== undefined) {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \" is not an iterable object.\");\n              } else {\n                const V = [];\n                const tmp = curArg;\n                for (let nextItem of tmp) {\n                  if (!utils.isObject(nextItem)) {\n                    throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \"'s element\" + \" is not an iterable object.\");\n                  } else {\n                    const V = [];\n                    const tmp = nextItem;\n                    for (let nextItem of tmp) {\n                      nextItem = conversions[\"ByteString\"](nextItem, {\n                        context: \"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \"'s element\" + \"'s element\",\n                        globals: globalObject\n                      });\n                      V.push(nextItem);\n                    }\n                    nextItem = V;\n                  }\n                  V.push(nextItem);\n                }\n                curArg = V;\n              }\n            } else {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" record\" + \" is not an object.\");\n              } else {\n                const result = Object.create(null);\n                for (const key of Reflect.ownKeys(curArg)) {\n                  const desc = Object.getOwnPropertyDescriptor(curArg, key);\n                  if (desc && desc.enumerable) {\n                    let typedKey = key;\n                    typedKey = conversions[\"ByteString\"](typedKey, {\n                      context: \"Failed to construct 'Headers': parameter 1\" + \" record\" + \"'s key\",\n                      globals: globalObject\n                    });\n                    let typedValue = curArg[key];\n                    typedValue = conversions[\"ByteString\"](typedValue, {\n                      context: \"Failed to construct 'Headers': parameter 1\" + \" record\" + \"'s value\",\n                      globals: globalObject\n                    });\n                    result[typedKey] = typedValue;\n                  }\n                }\n                curArg = result;\n              }\n            }\n          } else {\n            throw new globalObject.TypeError(\"Failed to construct 'Headers': parameter 1\" + \" is not of any supported type.\");\n          }\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n    append(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of Headers.\");\n      }\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(`Failed to execute 'append' on 'Headers': 2 arguments required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'append' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'append' on 'Headers': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].append(...args);\n    }\n    delete(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of Headers.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'delete' on 'Headers': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].delete(...args);\n    }\n    get(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of Headers.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'get' on 'Headers': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'get' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].get(...args);\n    }\n    has(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of Headers.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'has' on 'Headers': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'has' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].has(...args);\n    }\n    set(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of Headers.\");\n      }\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(`Failed to execute 'set' on 'Headers': 2 arguments required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'set' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'set' on 'Headers': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].set(...args);\n    }\n    keys() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of Headers.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key\");\n    }\n    values() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of Headers.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"value\");\n    }\n    entries() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of Headers.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key+value\");\n    }\n    forEach(callback) {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of Headers.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\");\n      }\n      callback = Function.convert(globalObject, callback, {\n        context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n      });\n      const thisArg = arguments[1];\n      let pairs = Array.from(this[implSymbol]);\n      let i = 0;\n      while (i < pairs.length) {\n        const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[implSymbol]);\n        i++;\n      }\n    }\n  }\n  Object.defineProperties(Headers.prototype, {\n    append: {\n      enumerable: true\n    },\n    delete: {\n      enumerable: true\n    },\n    get: {\n      enumerable: true\n    },\n    has: {\n      enumerable: true\n    },\n    set: {\n      enumerable: true\n    },\n    keys: {\n      enumerable: true\n    },\n    values: {\n      enumerable: true\n    },\n    entries: {\n      enumerable: true\n    },\n    forEach: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"Headers\",\n      configurable: true\n    },\n    [Symbol.iterator]: {\n      value: Headers.prototype.entries,\n      configurable: true,\n      writable: true\n    }\n  });\n  ctorRegistry[interfaceName] = Headers;\n  ctorRegistry[\"Headers Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n    [Symbol.toStringTag]: {\n      configurable: true,\n      value: \"Headers Iterator\"\n    }\n  });\n  utils.define(ctorRegistry[\"Headers Iterator\"], {\n    next() {\n      const internal = this && this[utils.iterInternalSymbol];\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a Headers iterator object\");\n      }\n      const {\n        target,\n        kind,\n        index\n      } = internal;\n      const values = Array.from(target[implSymbol]);\n      const len = values.length;\n      if (index >= len) {\n        return newObjectInRealm(globalObject, {\n          value: undefined,\n          done: true\n        });\n      }\n      const pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Headers\n  });\n};\nconst Impl = require(\"../fetch/Headers-impl.js\");","map":{"version":3,"names":["conversions","require","utils","Function","newObjectInRealm","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","globalObject","context","arguments","length","undefined","implForWrapper","TypeError","createDefaultIterator","target","kind","ctorRegistry","iteratorPrototype","iterator","Object","create","defineProperty","iterInternalSymbol","index","configurable","makeWrapper","newTarget","proto","prototype","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","initCtorRegistry","Headers","constructor","args","curArg","Symbol","V","tmp","nextItem","globals","push","result","key","Reflect","ownKeys","desc","getOwnPropertyDescriptor","enumerable","typedKey","typedValue","append","name","esValue","delete","get","set","keys","values","entries","forEach","callback","thisArg","pairs","Array","from","i","map","tryWrapperForImpl","call","defineProperties","toStringTag","writable","define","next","internal","len","done","pair","iteratorResult"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/jsdom/living/generated/Headers.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst Function = require(\"./Function.js\");\nconst newObjectInRealm = utils.newObjectInRealm;\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"Headers\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'Headers'.`);\n};\n\nexports.createDefaultIterator = (globalObject, target, kind) => {\n  const ctorRegistry = globalObject[ctorRegistrySymbol];\n  const iteratorPrototype = ctorRegistry[\"Headers Iterator\"];\n  const iterator = Object.create(iteratorPrototype);\n  Object.defineProperty(iterator, utils.iterInternalSymbol, {\n    value: { target, kind, index: 0 },\n    configurable: true\n  });\n  return iterator;\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"Headers\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class Headers {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          if (utils.isObject(curArg)) {\n            if (curArg[Symbol.iterator] !== undefined) {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \" is not an iterable object.\"\n                );\n              } else {\n                const V = [];\n                const tmp = curArg;\n                for (let nextItem of tmp) {\n                  if (!utils.isObject(nextItem)) {\n                    throw new globalObject.TypeError(\n                      \"Failed to construct 'Headers': parameter 1\" +\n                        \" sequence\" +\n                        \"'s element\" +\n                        \" is not an iterable object.\"\n                    );\n                  } else {\n                    const V = [];\n                    const tmp = nextItem;\n                    for (let nextItem of tmp) {\n                      nextItem = conversions[\"ByteString\"](nextItem, {\n                        context:\n                          \"Failed to construct 'Headers': parameter 1\" + \" sequence\" + \"'s element\" + \"'s element\",\n                        globals: globalObject\n                      });\n\n                      V.push(nextItem);\n                    }\n                    nextItem = V;\n                  }\n\n                  V.push(nextItem);\n                }\n                curArg = V;\n              }\n            } else {\n              if (!utils.isObject(curArg)) {\n                throw new globalObject.TypeError(\n                  \"Failed to construct 'Headers': parameter 1\" + \" record\" + \" is not an object.\"\n                );\n              } else {\n                const result = Object.create(null);\n                for (const key of Reflect.ownKeys(curArg)) {\n                  const desc = Object.getOwnPropertyDescriptor(curArg, key);\n                  if (desc && desc.enumerable) {\n                    let typedKey = key;\n\n                    typedKey = conversions[\"ByteString\"](typedKey, {\n                      context: \"Failed to construct 'Headers': parameter 1\" + \" record\" + \"'s key\",\n                      globals: globalObject\n                    });\n\n                    let typedValue = curArg[key];\n\n                    typedValue = conversions[\"ByteString\"](typedValue, {\n                      context: \"Failed to construct 'Headers': parameter 1\" + \" record\" + \"'s value\",\n                      globals: globalObject\n                    });\n\n                    result[typedKey] = typedValue;\n                  }\n                }\n                curArg = result;\n              }\n            }\n          } else {\n            throw new globalObject.TypeError(\n              \"Failed to construct 'Headers': parameter 1\" + \" is not of any supported type.\"\n            );\n          }\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    append(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'append' called on an object that is not a valid instance of Headers.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'append' on 'Headers': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'append' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'append' on 'Headers': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].append(...args);\n    }\n\n    delete(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'delete' called on an object that is not a valid instance of Headers.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'delete' on 'Headers': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'delete' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].delete(...args);\n    }\n\n    get(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get' called on an object that is not a valid instance of Headers.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'get' on 'Headers': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'get' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].get(...args);\n    }\n\n    has(name) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'has' called on an object that is not a valid instance of Headers.\");\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'has' on 'Headers': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'has' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].has(...args);\n    }\n\n    set(name, value) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'set' called on an object that is not a valid instance of Headers.\");\n      }\n\n      if (arguments.length < 2) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'set' on 'Headers': 2 arguments required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'set' on 'Headers': parameter 1\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        curArg = conversions[\"ByteString\"](curArg, {\n          context: \"Failed to execute 'set' on 'Headers': parameter 2\",\n          globals: globalObject\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].set(...args);\n    }\n\n    keys() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'keys' called on an object that is not a valid instance of Headers.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key\");\n    }\n\n    values() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'values' called on an object that is not a valid instance of Headers.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"value\");\n    }\n\n    entries() {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'entries' called on an object that is not a valid instance of Headers.\");\n      }\n      return exports.createDefaultIterator(globalObject, this, \"key+value\");\n    }\n\n    forEach(callback) {\n      if (!exports.is(this)) {\n        throw new globalObject.TypeError(\"'forEach' called on an object that is not a valid instance of Headers.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          \"Failed to execute 'forEach' on 'iterable': 1 argument required, but only 0 present.\"\n        );\n      }\n      callback = Function.convert(globalObject, callback, {\n        context: \"Failed to execute 'forEach' on 'iterable': The callback provided as parameter 1\"\n      });\n      const thisArg = arguments[1];\n      let pairs = Array.from(this[implSymbol]);\n      let i = 0;\n      while (i < pairs.length) {\n        const [key, value] = pairs[i].map(utils.tryWrapperForImpl);\n        callback.call(thisArg, value, key, this);\n        pairs = Array.from(this[implSymbol]);\n        i++;\n      }\n    }\n  }\n  Object.defineProperties(Headers.prototype, {\n    append: { enumerable: true },\n    delete: { enumerable: true },\n    get: { enumerable: true },\n    has: { enumerable: true },\n    set: { enumerable: true },\n    keys: { enumerable: true },\n    values: { enumerable: true },\n    entries: { enumerable: true },\n    forEach: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"Headers\", configurable: true },\n    [Symbol.iterator]: { value: Headers.prototype.entries, configurable: true, writable: true }\n  });\n  ctorRegistry[interfaceName] = Headers;\n\n  ctorRegistry[\"Headers Iterator\"] = Object.create(ctorRegistry[\"%IteratorPrototype%\"], {\n    [Symbol.toStringTag]: {\n      configurable: true,\n      value: \"Headers Iterator\"\n    }\n  });\n  utils.define(ctorRegistry[\"Headers Iterator\"], {\n    next() {\n      const internal = this && this[utils.iterInternalSymbol];\n      if (!internal) {\n        throw new globalObject.TypeError(\"next() called on a value that is not a Headers iterator object\");\n      }\n\n      const { target, kind, index } = internal;\n      const values = Array.from(target[implSymbol]);\n      const len = values.length;\n      if (index >= len) {\n        return newObjectInRealm(globalObject, { value: undefined, done: true });\n      }\n\n      const pair = values[index];\n      internal.index = index + 1;\n      return newObjectInRealm(globalObject, utils.iteratorResult(pair.map(utils.tryWrapperForImpl), kind));\n    }\n  });\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Headers\n  });\n};\n\nconst Impl = require(\"../fetch/Headers-impl.js\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}