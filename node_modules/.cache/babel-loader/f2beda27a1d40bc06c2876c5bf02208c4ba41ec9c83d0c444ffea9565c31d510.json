{"ast":null,"code":"\"use strict\";\n\nconst enumerationValues = new Set([\"text/html\", \"text/xml\", \"application/xml\", \"application/xhtml+xml\", \"image/svg+xml\"]);\nexports.enumerationValues = enumerationValues;\nexports.convert = function (globalObject, value) {\n  let {\n    context = \"The provided value\"\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const string = `${value}`;\n  if (!enumerationValues.has(string)) {\n    throw new globalObject.TypeError(`${context} '${string}' is not a valid enumeration value for SupportedType`);\n  }\n  return string;\n};","map":{"version":3,"names":["enumerationValues","Set","exports","convert","globalObject","value","context","arguments","length","undefined","string","has","TypeError"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/jsdom/living/generated/SupportedType.js"],"sourcesContent":["\"use strict\";\n\nconst enumerationValues = new Set([\n  \"text/html\",\n  \"text/xml\",\n  \"application/xml\",\n  \"application/xhtml+xml\",\n  \"image/svg+xml\"\n]);\nexports.enumerationValues = enumerationValues;\n\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  const string = `${value}`;\n  if (!enumerationValues.has(string)) {\n    throw new globalObject.TypeError(`${context} '${string}' is not a valid enumeration value for SupportedType`);\n  }\n  return string;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAChC,WAAW,EACX,UAAU,EACV,iBAAiB,EACjB,uBAAuB,EACvB,eAAe,CAChB,CAAC;AACFC,OAAO,CAACF,iBAAiB,GAAGA,iBAAiB;AAE7CE,OAAO,CAACC,OAAO,GAAG,UAACC,YAAY,EAAEC,KAAK,EAA8C;EAAA,IAA5C;IAAEC,OAAO,GAAG;EAAqB,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC7E,MAAMG,MAAM,GAAI,GAAEL,KAAM,EAAC;EACzB,IAAI,CAACL,iBAAiB,CAACW,GAAG,CAACD,MAAM,CAAC,EAAE;IAClC,MAAM,IAAIN,YAAY,CAACQ,SAAS,CAAE,GAAEN,OAAQ,KAAII,MAAO,sDAAqD,CAAC;EAC/G;EACA,OAAOA,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}