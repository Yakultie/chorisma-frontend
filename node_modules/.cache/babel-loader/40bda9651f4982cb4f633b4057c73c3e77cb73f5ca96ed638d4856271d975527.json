{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst Node = require(\"./Node.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"XMLSerializer\";\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = function (globalObject, value) {\n  let {\n    context = \"The provided value\"\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'XMLSerializer'.`);\n};\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"XMLSerializer\"].prototype;\n  }\n  return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject) => {};\nexports.setup = function (wrapper, globalObject) {\n  let constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\nconst exposed = new Set([\"Window\"]);\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class XMLSerializer {\n    constructor() {\n      return exports.setup(Object.create(new.target.prototype), globalObject, undefined);\n    }\n    serializeToString(root) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'serializeToString' called on an object that is not a valid instance of XMLSerializer.\");\n      }\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(`Failed to execute 'serializeToString' on 'XMLSerializer': 1 argument required, but only ${arguments.length} present.`);\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = Node.convert(globalObject, curArg, {\n          context: \"Failed to execute 'serializeToString' on 'XMLSerializer': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].serializeToString(...args);\n    }\n  }\n  Object.defineProperties(XMLSerializer.prototype, {\n    serializeToString: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"XMLSerializer\",\n      configurable: true\n    }\n  });\n  ctorRegistry[interfaceName] = XMLSerializer;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: XMLSerializer\n  });\n};\nconst Impl = require(\"../domparsing/XMLSerializer-impl.js\");","map":{"version":3,"names":["conversions","require","utils","Node","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","globalObject","context","arguments","length","undefined","implForWrapper","TypeError","makeWrapper","newTarget","proto","prototype","Object","create","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","ctorRegistry","initCtorRegistry","XMLSerializer","constructor","target","serializeToString","root","esValue","args","curArg","push","defineProperties","enumerable","Symbol","toStringTag","writable"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/jsdom/living/generated/XMLSerializer.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst Node = require(\"./Node.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"XMLSerializer\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'XMLSerializer'.`);\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"XMLSerializer\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class XMLSerializer {\n    constructor() {\n      return exports.setup(Object.create(new.target.prototype), globalObject, undefined);\n    }\n\n    serializeToString(root) {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'serializeToString' called on an object that is not a valid instance of XMLSerializer.\"\n        );\n      }\n\n      if (arguments.length < 1) {\n        throw new globalObject.TypeError(\n          `Failed to execute 'serializeToString' on 'XMLSerializer': 1 argument required, but only ${arguments.length} present.`\n        );\n      }\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = Node.convert(globalObject, curArg, {\n          context: \"Failed to execute 'serializeToString' on 'XMLSerializer': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return esValue[implSymbol].serializeToString(...args);\n    }\n  }\n  Object.defineProperties(XMLSerializer.prototype, {\n    serializeToString: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"XMLSerializer\", configurable: true }\n  });\n  ctorRegistry[interfaceName] = XMLSerializer;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: XMLSerializer\n  });\n};\n\nconst Impl = require(\"../domparsing/XMLSerializer-impl.js\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}