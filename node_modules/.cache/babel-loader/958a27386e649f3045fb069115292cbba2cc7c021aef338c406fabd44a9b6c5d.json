{"ast":null,"code":"\"use strict\";\n\nconst DOMRectReadOnly = require(\"../generated/DOMRectReadOnly\");\nclass DOMRectReadOnlyImpl {\n  constructor(globalObject, _ref) {\n    let [x = 0, y = 0, width = 0, height = 0] = _ref;\n    this._globalObject = globalObject;\n    this._x = x;\n    this._y = y;\n    this._width = width;\n    this._height = height;\n  }\n  static fromRect(globalObject, other) {\n    return DOMRectReadOnly.createImpl(globalObject, [other.x, other.y, other.width, other.height]);\n  }\n  get x() {\n    return this._x;\n  }\n  get y() {\n    return this._y;\n  }\n  get width() {\n    return this._width;\n  }\n  get height() {\n    return this._height;\n  }\n  get top() {\n    const {\n      height,\n      y\n    } = this;\n    // We use Math.min's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.min(y, y + height);\n  }\n  get right() {\n    const {\n      width,\n      x\n    } = this;\n    // We use Math.max's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.max(x, x + width);\n  }\n  get bottom() {\n    const {\n      height,\n      y\n    } = this;\n    // We use Math.max's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.max(y, y + height);\n  }\n  get left() {\n    const {\n      width,\n      x\n    } = this;\n    // We use Math.min's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.min(x, x + width);\n  }\n\n  // Could be removed after https://github.com/jsdom/webidl2js/issues/185 gets fixed.\n  toJSON() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      top: this.top,\n      right: this.right,\n      bottom: this.bottom,\n      left: this.left\n    };\n  }\n}\nexports.implementation = DOMRectReadOnlyImpl;","map":{"version":3,"names":["DOMRectReadOnly","require","DOMRectReadOnlyImpl","constructor","globalObject","_ref","x","y","width","height","_globalObject","_x","_y","_width","_height","fromRect","other","createImpl","top","Math","min","right","max","bottom","left","toJSON","exports","implementation"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/jsdom/living/geometry/DOMRectReadOnly-impl.js"],"sourcesContent":["\"use strict\";\nconst DOMRectReadOnly = require(\"../generated/DOMRectReadOnly\");\n\nclass DOMRectReadOnlyImpl {\n  constructor(globalObject, [x = 0, y = 0, width = 0, height = 0]) {\n    this._globalObject = globalObject;\n    this._x = x;\n    this._y = y;\n    this._width = width;\n    this._height = height;\n  }\n\n  static fromRect(globalObject, other) {\n    return DOMRectReadOnly.createImpl(globalObject, [other.x, other.y, other.width, other.height]);\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  get height() {\n    return this._height;\n  }\n\n  get top() {\n    const { height, y } = this;\n    // We use Math.min's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.min(y, y + height);\n  }\n\n  get right() {\n    const { width, x } = this;\n    // We use Math.max's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.max(x, x + width);\n  }\n\n  get bottom() {\n    const { height, y } = this;\n    // We use Math.max's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.max(y, y + height);\n  }\n\n  get left() {\n    const { width, x } = this;\n    // We use Math.min's built-in NaN handling: https://github.com/w3c/fxtf-drafts/issues/222\n    return Math.min(x, x + width);\n  }\n\n  // Could be removed after https://github.com/jsdom/webidl2js/issues/185 gets fixed.\n  toJSON() {\n    return {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n      top: this.top,\n      right: this.right,\n      bottom: this.bottom,\n      left: this.left\n    };\n  }\n}\n\nexports.implementation = DOMRectReadOnlyImpl;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,8BAA8B,CAAC;AAE/D,MAAMC,mBAAmB,CAAC;EACxBC,WAAWA,CAACC,YAAY,EAAAC,IAAA,EAAyC;IAAA,IAAvC,CAACC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,CAAC,GAAAJ,IAAA;IAC7D,IAAI,CAACK,aAAa,GAAGN,YAAY;IACjC,IAAI,CAACO,EAAE,GAAGL,CAAC;IACX,IAAI,CAACM,EAAE,GAAGL,CAAC;IACX,IAAI,CAACM,MAAM,GAAGL,KAAK;IACnB,IAAI,CAACM,OAAO,GAAGL,MAAM;EACvB;EAEA,OAAOM,QAAQA,CAACX,YAAY,EAAEY,KAAK,EAAE;IACnC,OAAOhB,eAAe,CAACiB,UAAU,CAACb,YAAY,EAAE,CAACY,KAAK,CAACV,CAAC,EAAEU,KAAK,CAACT,CAAC,EAAES,KAAK,CAACR,KAAK,EAAEQ,KAAK,CAACP,MAAM,CAAC,CAAC;EAChG;EAEA,IAAIH,CAACA,CAAA,EAAG;IACN,OAAO,IAAI,CAACK,EAAE;EAChB;EAEA,IAAIJ,CAACA,CAAA,EAAG;IACN,OAAO,IAAI,CAACK,EAAE;EAChB;EAEA,IAAIJ,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACK,MAAM;EACpB;EAEA,IAAIJ,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAACK,OAAO;EACrB;EAEA,IAAII,GAAGA,CAAA,EAAG;IACR,MAAM;MAAET,MAAM;MAAEF;IAAE,CAAC,GAAG,IAAI;IAC1B;IACA,OAAOY,IAAI,CAACC,GAAG,CAACb,CAAC,EAAEA,CAAC,GAAGE,MAAM,CAAC;EAChC;EAEA,IAAIY,KAAKA,CAAA,EAAG;IACV,MAAM;MAAEb,KAAK;MAAEF;IAAE,CAAC,GAAG,IAAI;IACzB;IACA,OAAOa,IAAI,CAACG,GAAG,CAAChB,CAAC,EAAEA,CAAC,GAAGE,KAAK,CAAC;EAC/B;EAEA,IAAIe,MAAMA,CAAA,EAAG;IACX,MAAM;MAAEd,MAAM;MAAEF;IAAE,CAAC,GAAG,IAAI;IAC1B;IACA,OAAOY,IAAI,CAACG,GAAG,CAACf,CAAC,EAAEA,CAAC,GAAGE,MAAM,CAAC;EAChC;EAEA,IAAIe,IAAIA,CAAA,EAAG;IACT,MAAM;MAAEhB,KAAK;MAAEF;IAAE,CAAC,GAAG,IAAI;IACzB;IACA,OAAOa,IAAI,CAACC,GAAG,CAACd,CAAC,EAAEA,CAAC,GAAGE,KAAK,CAAC;EAC/B;;EAEA;EACAiB,MAAMA,CAAA,EAAG;IACP,OAAO;MACLnB,CAAC,EAAE,IAAI,CAACA,CAAC;MACTC,CAAC,EAAE,IAAI,CAACA,CAAC;MACTC,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBS,GAAG,EAAE,IAAI,CAACA,GAAG;MACbG,KAAK,EAAE,IAAI,CAACA,KAAK;MACjBE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,IAAI,EAAE,IAAI,CAACA;IACb,CAAC;EACH;AACF;AAEAE,OAAO,CAACC,cAAc,GAAGzB,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}