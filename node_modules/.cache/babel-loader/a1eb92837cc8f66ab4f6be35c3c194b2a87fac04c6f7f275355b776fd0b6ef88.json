{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst DOMRectInit = require(\"./DOMRectInit.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\nconst interfaceName = \"DOMRectReadOnly\";\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = function (globalObject, value) {\n  let {\n    context = \"The provided value\"\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'DOMRectReadOnly'.`);\n};\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"DOMRectReadOnly\"].prototype;\n  }\n  return Object.create(proto);\n}\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\nexports._internalSetup = (wrapper, globalObject) => {};\nexports.setup = function (wrapper, globalObject) {\n  let constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\nconst exposed = new Set([\"Window\", \"Worker\"]);\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class DOMRectReadOnly {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 1\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 2\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 3\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[3];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 4\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n    toJSON() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'toJSON' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol].toJSON();\n    }\n    get x() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get x' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"x\"];\n    }\n    get y() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get y' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"y\"];\n    }\n    get width() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get width' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"width\"];\n    }\n    get height() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get height' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"height\"];\n    }\n    get top() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get top' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"top\"];\n    }\n    get right() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get right' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"right\"];\n    }\n    get bottom() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get bottom' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"bottom\"];\n    }\n    get left() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\"'get left' called on an object that is not a valid instance of DOMRectReadOnly.\");\n      }\n      return esValue[implSymbol][\"left\"];\n    }\n    static fromRect() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = DOMRectInit.convert(globalObject, curArg, {\n          context: \"Failed to execute 'fromRect' on 'DOMRectReadOnly': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(Impl.implementation.fromRect(globalObject, ...args));\n    }\n  }\n  Object.defineProperties(DOMRectReadOnly.prototype, {\n    toJSON: {\n      enumerable: true\n    },\n    x: {\n      enumerable: true\n    },\n    y: {\n      enumerable: true\n    },\n    width: {\n      enumerable: true\n    },\n    height: {\n      enumerable: true\n    },\n    top: {\n      enumerable: true\n    },\n    right: {\n      enumerable: true\n    },\n    bottom: {\n      enumerable: true\n    },\n    left: {\n      enumerable: true\n    },\n    [Symbol.toStringTag]: {\n      value: \"DOMRectReadOnly\",\n      configurable: true\n    }\n  });\n  Object.defineProperties(DOMRectReadOnly, {\n    fromRect: {\n      enumerable: true\n    }\n  });\n  ctorRegistry[interfaceName] = DOMRectReadOnly;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: DOMRectReadOnly\n  });\n};\nconst Impl = require(\"../geometry/DOMRectReadOnly-impl.js\");","map":{"version":3,"names":["conversions","require","utils","DOMRectInit","implSymbol","ctorRegistrySymbol","interfaceName","exports","is","value","isObject","hasOwn","Impl","implementation","isImpl","convert","globalObject","context","arguments","length","undefined","implForWrapper","TypeError","makeWrapper","newTarget","proto","prototype","Object","create","constructorArgs","privateData","wrapper","setup","createImpl","_internalSetup","defineProperty","configurable","wrapperSymbol","init","new","exposed","Set","install","globalNames","some","globalName","has","ctorRegistry","initCtorRegistry","DOMRectReadOnly","constructor","args","curArg","globals","push","target","toJSON","esValue","x","y","width","height","top","right","bottom","left","fromRect","tryWrapperForImpl","defineProperties","enumerable","Symbol","toStringTag","writable"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/jsdom/living/generated/DOMRectReadOnly.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst DOMRectInit = require(\"./DOMRectInit.js\");\nconst implSymbol = utils.implSymbol;\nconst ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nconst interfaceName = \"DOMRectReadOnly\";\n\nexports.is = value => {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\nexports.isImpl = value => {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\nexports.convert = (globalObject, value, { context = \"The provided value\" } = {}) => {\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n  throw new globalObject.TypeError(`${context} is not of type 'DOMRectReadOnly'.`);\n};\n\nfunction makeWrapper(globalObject, newTarget) {\n  let proto;\n  if (newTarget !== undefined) {\n    proto = newTarget.prototype;\n  }\n\n  if (!utils.isObject(proto)) {\n    proto = globalObject[ctorRegistrySymbol][\"DOMRectReadOnly\"].prototype;\n  }\n\n  return Object.create(proto);\n}\n\nexports.create = (globalObject, constructorArgs, privateData) => {\n  const wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = (globalObject, constructorArgs, privateData) => {\n  const wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = (wrapper, globalObject) => {};\n\nexports.setup = (wrapper, globalObject, constructorArgs = [], privateData = {}) => {\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper;\n};\n\nexports.new = (globalObject, newTarget) => {\n  const wrapper = makeWrapper(globalObject, newTarget);\n\n  exports._internalSetup(wrapper, globalObject);\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n  return wrapper[implSymbol];\n};\n\nconst exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = (globalObject, globalNames) => {\n  if (!globalNames.some(globalName => exposed.has(globalName))) {\n    return;\n  }\n\n  const ctorRegistry = utils.initCtorRegistry(globalObject);\n  class DOMRectReadOnly {\n    constructor() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 1\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[1];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 2\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[2];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 3\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      {\n        let curArg = arguments[3];\n        if (curArg !== undefined) {\n          curArg = conversions[\"unrestricted double\"](curArg, {\n            context: \"Failed to construct 'DOMRectReadOnly': parameter 4\",\n            globals: globalObject\n          });\n        } else {\n          curArg = 0;\n        }\n        args.push(curArg);\n      }\n      return exports.setup(Object.create(new.target.prototype), globalObject, args);\n    }\n\n    toJSON() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'toJSON' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol].toJSON();\n    }\n\n    get x() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get x' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"x\"];\n    }\n\n    get y() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get y' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"y\"];\n    }\n\n    get width() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get width' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"width\"];\n    }\n\n    get height() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get height' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"height\"];\n    }\n\n    get top() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get top' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"top\"];\n    }\n\n    get right() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get right' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"right\"];\n    }\n\n    get bottom() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get bottom' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"bottom\"];\n    }\n\n    get left() {\n      const esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new globalObject.TypeError(\n          \"'get left' called on an object that is not a valid instance of DOMRectReadOnly.\"\n        );\n      }\n\n      return esValue[implSymbol][\"left\"];\n    }\n\n    static fromRect() {\n      const args = [];\n      {\n        let curArg = arguments[0];\n        curArg = DOMRectInit.convert(globalObject, curArg, {\n          context: \"Failed to execute 'fromRect' on 'DOMRectReadOnly': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      return utils.tryWrapperForImpl(Impl.implementation.fromRect(globalObject, ...args));\n    }\n  }\n  Object.defineProperties(DOMRectReadOnly.prototype, {\n    toJSON: { enumerable: true },\n    x: { enumerable: true },\n    y: { enumerable: true },\n    width: { enumerable: true },\n    height: { enumerable: true },\n    top: { enumerable: true },\n    right: { enumerable: true },\n    bottom: { enumerable: true },\n    left: { enumerable: true },\n    [Symbol.toStringTag]: { value: \"DOMRectReadOnly\", configurable: true }\n  });\n  Object.defineProperties(DOMRectReadOnly, { fromRect: { enumerable: true } });\n  ctorRegistry[interfaceName] = DOMRectReadOnly;\n\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: DOMRectReadOnly\n  });\n};\n\nconst Impl = require(\"../geometry/DOMRectReadOnly-impl.js\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}