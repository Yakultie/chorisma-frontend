{"ast":null,"code":"\"use strict\";\n\nconst nodeCrypto = require(\"crypto\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\n// https://w3c.github.io/webcrypto/#crypto-interface\nclass CryptoImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  // https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues\n  getRandomValues(array) {\n    const typeName = getTypedArrayTypeName(array);\n    if (!(typeName === \"Int8Array\" || typeName === \"Uint8Array\" || typeName === \"Uint8ClampedArray\" || typeName === \"Int16Array\" || typeName === \"Uint16Array\" || typeName === \"Int32Array\" || typeName === \"Uint32Array\" || typeName === \"BigInt64Array\" || typeName === \"BigUint64Array\")) {\n      throw DOMException.create(this._globalObject, [`getRandomValues() only accepts integer typed arrays`, \"TypeMismatchError\"]);\n    }\n    if (array.byteLength > 65536) {\n      throw DOMException.create(this._globalObject, [`getRandomValues() cannot generate more than 65536 bytes of random values; ` + `${array.byteLength} bytes were requested`, \"QuotaExceededError\"]);\n    }\n    nodeCrypto.randomFillSync(array);\n    return array;\n  }\n\n  // https://w3c.github.io/webcrypto/#Crypto-method-randomUUID\n  randomUUID() {\n    return nodeCrypto.randomUUID();\n  }\n}\nexports.implementation = CryptoImpl;\n\n// See #3395. Subclasses of TypedArrays should properly work, but we can't rely\n// on instanceof because Uint8Array may be different across different windows -\n// which can happen in JSDOM when running { runScripts: \"dangerously\" }. As a\n// solution, we imitate the behavior of instanceof by walking the proottype\n// chain.\nfunction getTypedArrayTypeName(array) {\n  const target = array.constructor;\n  const chain = [target.name];\n  let proto = Object.getPrototypeOf(target);\n  while (proto) {\n    chain.push(proto.name);\n    proto = Object.getPrototypeOf(proto);\n  }\n  while (chain.length > 0 && chain[chain.length - 1] !== \"TypedArray\") {\n    chain.pop();\n  }\n  chain.reverse();\n  return chain[1];\n}","map":{"version":3,"names":["nodeCrypto","require","DOMException","CryptoImpl","constructor","globalObject","_globalObject","getRandomValues","array","typeName","getTypedArrayTypeName","create","byteLength","randomFillSync","randomUUID","exports","implementation","target","chain","name","proto","Object","getPrototypeOf","push","length","pop","reverse"],"sources":["/Users/bernard/Downloads/my-app/node_modules/jsdom/lib/jsdom/living/crypto/Crypto-impl.js"],"sourcesContent":["\"use strict\";\n\nconst nodeCrypto = require(\"crypto\");\nconst DOMException = require(\"domexception/webidl2js-wrapper\");\n\n// https://w3c.github.io/webcrypto/#crypto-interface\nclass CryptoImpl {\n  constructor(globalObject) {\n    this._globalObject = globalObject;\n  }\n\n  // https://w3c.github.io/webcrypto/#Crypto-method-getRandomValues\n  getRandomValues(array) {\n    const typeName = getTypedArrayTypeName(array);\n    if (!(typeName === \"Int8Array\" ||\n        typeName === \"Uint8Array\" ||\n        typeName === \"Uint8ClampedArray\" ||\n        typeName === \"Int16Array\" ||\n        typeName === \"Uint16Array\" ||\n        typeName === \"Int32Array\" ||\n        typeName === \"Uint32Array\" ||\n        typeName === \"BigInt64Array\" ||\n        typeName === \"BigUint64Array\")) {\n      throw DOMException.create(this._globalObject, [\n        `getRandomValues() only accepts integer typed arrays`,\n        \"TypeMismatchError\"\n      ]);\n    }\n\n    if (array.byteLength > 65536) {\n      throw DOMException.create(this._globalObject, [\n        `getRandomValues() cannot generate more than 65536 bytes of random values; ` +\n        `${array.byteLength} bytes were requested`,\n        \"QuotaExceededError\"\n      ]);\n    }\n    nodeCrypto.randomFillSync(array);\n    return array;\n  }\n\n  // https://w3c.github.io/webcrypto/#Crypto-method-randomUUID\n  randomUUID() {\n    return nodeCrypto.randomUUID();\n  }\n}\n\nexports.implementation = CryptoImpl;\n\n// See #3395. Subclasses of TypedArrays should properly work, but we can't rely\n// on instanceof because Uint8Array may be different across different windows -\n// which can happen in JSDOM when running { runScripts: \"dangerously\" }. As a\n// solution, we imitate the behavior of instanceof by walking the proottype\n// chain.\nfunction getTypedArrayTypeName(array) {\n  const target = array.constructor;\n  const chain = [target.name];\n  let proto = Object.getPrototypeOf(target);\n  while (proto) {\n    chain.push(proto.name);\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  while (chain.length > 0 && chain[chain.length - 1] !== \"TypedArray\") {\n    chain.pop();\n  }\n  chain.reverse();\n  return chain[1];\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,UAAU,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACpC,MAAMC,YAAY,GAAGD,OAAO,CAAC,gCAAgC,CAAC;;AAE9D;AACA,MAAME,UAAU,CAAC;EACfC,WAAWA,CAACC,YAAY,EAAE;IACxB,IAAI,CAACC,aAAa,GAAGD,YAAY;EACnC;;EAEA;EACAE,eAAeA,CAACC,KAAK,EAAE;IACrB,MAAMC,QAAQ,GAAGC,qBAAqB,CAACF,KAAK,CAAC;IAC7C,IAAI,EAAEC,QAAQ,KAAK,WAAW,IAC1BA,QAAQ,KAAK,YAAY,IACzBA,QAAQ,KAAK,mBAAmB,IAChCA,QAAQ,KAAK,YAAY,IACzBA,QAAQ,KAAK,aAAa,IAC1BA,QAAQ,KAAK,YAAY,IACzBA,QAAQ,KAAK,aAAa,IAC1BA,QAAQ,KAAK,eAAe,IAC5BA,QAAQ,KAAK,gBAAgB,CAAC,EAAE;MAClC,MAAMP,YAAY,CAACS,MAAM,CAAC,IAAI,CAACL,aAAa,EAAE,CAC3C,qDAAoD,EACrD,mBAAmB,CACpB,CAAC;IACJ;IAEA,IAAIE,KAAK,CAACI,UAAU,GAAG,KAAK,EAAE;MAC5B,MAAMV,YAAY,CAACS,MAAM,CAAC,IAAI,CAACL,aAAa,EAAE,CAC3C,4EAA2E,GAC3E,GAAEE,KAAK,CAACI,UAAW,uBAAsB,EAC1C,oBAAoB,CACrB,CAAC;IACJ;IACAZ,UAAU,CAACa,cAAc,CAACL,KAAK,CAAC;IAChC,OAAOA,KAAK;EACd;;EAEA;EACAM,UAAUA,CAAA,EAAG;IACX,OAAOd,UAAU,CAACc,UAAU,CAAC,CAAC;EAChC;AACF;AAEAC,OAAO,CAACC,cAAc,GAAGb,UAAU;;AAEnC;AACA;AACA;AACA;AACA;AACA,SAASO,qBAAqBA,CAACF,KAAK,EAAE;EACpC,MAAMS,MAAM,GAAGT,KAAK,CAACJ,WAAW;EAChC,MAAMc,KAAK,GAAG,CAACD,MAAM,CAACE,IAAI,CAAC;EAC3B,IAAIC,KAAK,GAAGC,MAAM,CAACC,cAAc,CAACL,MAAM,CAAC;EACzC,OAAOG,KAAK,EAAE;IACZF,KAAK,CAACK,IAAI,CAACH,KAAK,CAACD,IAAI,CAAC;IACtBC,KAAK,GAAGC,MAAM,CAACC,cAAc,CAACF,KAAK,CAAC;EACtC;EAEA,OAAOF,KAAK,CAACM,MAAM,GAAG,CAAC,IAAIN,KAAK,CAACA,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC,KAAK,YAAY,EAAE;IACnEN,KAAK,CAACO,GAAG,CAAC,CAAC;EACb;EACAP,KAAK,CAACQ,OAAO,CAAC,CAAC;EACf,OAAOR,KAAK,CAAC,CAAC,CAAC;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}